
import matplotlib.pyplot as plt
import numpy as np

def polar_rose(n, d):
    t = np.linspace(0, 2*np.pi, 1000)
    r = np.cos(n/d*t)*2
    x = r*np.cos(t)
    y = r*np.sin(t)
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_aspect('equal')
    plt.show()


# В этой функции мы создаем массив значений t от 0 до 2π, затем вычисляем значение радиуса r для каждого значения t по формулам, приведенным на странице Википедии. Затем мы вычисляем координаты точек полярной розы и создаем график, устанавливаем соотношение сторон равным и выводим его на экран.

# Чтобы сделать параметры n и d интерактивными, добавим слайдеры при помощи библиотеки ipywidgets:

import matplotlib.pyplot as plt
import numpy as np
import ipywidgets as widgets
from IPython.display import display

def polar_rose(n, d):
    t = np.linspace(0, 2*np.pi, 1000)
    r = np.cos(n/d*t)*2
    x = r*np.cos(t)
    y = r*np.sin(t)
    fig, ax = plt.subplots()
    ax.plot(x, y)
    ax.set_aspect('equal')
    plt.show()

n_slider = widgets.FloatSlider(min=0.1, max=10.0, step=0.1, value=2.0)
d_slider = widgets.FloatSlider(min=0.1, max=10.0, step=0.1, value=3.0)
widgets.interactive(polar_rose, n=n_slider, d=d_slider)


# Теперь мы создаем два слайдера с диапазоном значений от 0.1 до 10.0 с шагом 0.1 и начальными значениями 2.0 и 3.0 соответственно. Затем мы используем функцию interactive из библиотеки ipywidgets для связывания значений n и d из слайдеров с функцией polar_rose.

# Таким образом, мы получаем интерактивную отрисовку полярной розы с возможностью изменения параметров n и d.
# Можно попробовать различные значения параметров и посмотреть, как меняется форма кривой. Например, при n=2 и d=3 получается классическая роза с 6 лепестками, а при n=4 и d=3 получается роза с 12 лепестками. Также можно попробовать реализовать другие параметрические кривые, например, циклоиду или катеноиду.
